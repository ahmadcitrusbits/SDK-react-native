
package com.qualtrics.reactdigital;

import android.util.Log;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.UiThreadUtil;
import com.qualtrics.digital.IQualtricsCallback;
import com.qualtrics.digital.IQualtricsInitializationCallback;
import com.qualtrics.digital.IQualtricsProjectEvaluationCallback;
import com.qualtrics.digital.IQualtricsProjectInitializationCallback;
import com.qualtrics.digital.Qualtrics;
import com.qualtrics.digital.InitializationResult;
import com.qualtrics.digital.TargetingResult;
import com.qualtrics.digital.TargetingResultStatus;

import java.util.List;
import java.util.Map;

public class RNQualtricsDigitalModule extends ReactContextBaseJavaModule {

    private static final String TAG = "Qualtrics";
    private static final String EVALUATE_EVENT = "evaluateEvent";
    private static final String INITIALIZE_EVENT = "initializeEvent";
    private static final String INITIALIZE_PROJECT_EVENT = "initializeProjectEvent";
    private static final String EVALUATE_PROJECT_EVENT = "evaluateProjectEvent";
    private static final String EVALUATE_INTERCEPT_EVENT = "evaluateInterceptEvent";
    private static InitializationResult gInitializationResult = null;
    private static TargetingResult gTargetingResult = null;
    private final ReactApplicationContext reactContext;

    public RNQualtricsDigitalModule(ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;
    }

    @Override
    public String getName() {
        return "RNQualtricsDigital";
    }

    @ReactMethod
    public void initialize(String brandId, String zoneId, String interceptId) {
        Qualtrics.instance().initialize(brandId, zoneId, interceptId, getReactApplicationContext());
    }

    @ReactMethod
    public void initializeWithCompletion(String brandId, String zoneId, String interceptId) {
        Qualtrics.instance().initialize(brandId, zoneId, interceptId, getReactApplicationContext(), new IQualtricsInitializationCallback() {
            @Override
            public void run(InitializationResult initializationResult) {
                WritableMap initializeResult = Arguments.createMap();
                if (initializationResult != null) {
                    gInitializationResult = initializationResult;
                    initializeResult.putBoolean("passed", initializationResult.passed());
                    initializeResult.putString("message", initializationResult.getMessage());
                }
                reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit(INITIALIZE_EVENT, initializeResult);
            }
        });
    }

    @ReactMethod
    public void evaluateTargetingLogic() {
        final WritableMap targetResult = Arguments.createMap();
        boolean initializeFailed = gInitializationResult != null && !gInitializationResult.passed();
        if (initializeFailed) {
            targetResult.putBoolean("passed", gInitializationResult.passed());
            targetResult.putString("surveyUrl", null);
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(EVALUATE_EVENT, targetResult);
            return;
        }

        Qualtrics.instance().evaluateTargetingLogic(new IQualtricsCallback() {
            @Override
            public void run(TargetingResult targetingResult) {
                if (targetingResult != null) {
                    gTargetingResult = targetingResult;
                    targetResult.putBoolean("passed", targetingResult.passed());
                    targetResult.putString("surveyUrl", targetingResult.getSurveyUrl());
                }
                reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit(EVALUATE_EVENT, targetResult);
            }
        });
    }

    @ReactMethod
    public void display(final Callback callback) {
        boolean initializeFailed = gInitializationResult != null && !gInitializationResult.passed();
        if (initializeFailed) {
            callback.invoke(false);
            return;
        }

        UiThreadUtil.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (getCurrentActivity() != null) {
                    boolean displayResult = Qualtrics.instance().display(getCurrentActivity());
                    if (displayResult) {
                        gTargetingResult = null;
                    }
                    callback.invoke(displayResult);
                } else {
                    Log.w(TAG, "Display requires active activity");
                    callback.invoke(false);
                }
            }
        });

    }

    @ReactMethod
    public void registerViewVisit(String viewName) {
        Qualtrics.instance().registerViewVisit(viewName);
    }

    @ReactMethod
    public void resetTimer() {
        Qualtrics.instance().resetTimer();
    }

    @ReactMethod
    public void resetViewCounter() {
        Qualtrics.instance().resetViewCounter();
    }

    @ReactMethod
    public void setString(String key, String value) {
        Qualtrics.instance().properties.setContext(getReactApplicationContext());
        Qualtrics.instance().properties.setString(key, value);
    }

    @ReactMethod
    public void setNumber(String key, double value) {
        Qualtrics.instance().properties.setNumber(key, value);
    }

    @ReactMethod
    public void setDateTime(String key) {
        Qualtrics.instance().properties.setDateTime(key);
    }

    @ReactMethod
    public void setNotificationIconAsset(String asset) {

        int resID = getReactApplicationContext().getResources().getIdentifier(asset, "drawable", getReactApplicationContext().getPackageName());
        Qualtrics.instance().properties.setNotificationIconAsset(resID);
    }

    @ReactMethod
    public void recordClick() {
        if (gTargetingResult != null) {
            gTargetingResult.recordClick();
        }
    }

    @ReactMethod
    public void recordImpression() {
        if (gTargetingResult != null) {
            gTargetingResult.recordImpression();
        }
    }

    @ReactMethod
    public void displayTarget(final Callback callback) {
        UiThreadUtil.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                boolean displayTargetResult = false;
                if (gTargetingResult != null && gTargetingResult.getSurveyUrl() != null) {
                    Qualtrics.instance().displayTarget(getCurrentActivity(), gTargetingResult.getSurveyUrl());
                    displayTargetResult = true;
                }
                callback.invoke(displayTargetResult);
            }
        });
    }

    @ReactMethod
    public void initializeProject(String brandId, String zoneId, String extRefId) {
        Qualtrics.instance().initializeProject(brandId, zoneId, extRefId, getReactApplicationContext(), new IQualtricsProjectInitializationCallback() {
            @Override
            public void run(Map<String, InitializationResult> initializationResult) {
                final WritableMap initializeProjectResult = Arguments.createMap();
                for (String interceptId: initializationResult.keySet()) {
                    final WritableMap resultMap = Arguments.createMap();
                    InitializationResult result = initializationResult.get(interceptId);
                    resultMap.putBoolean("passed", result.passed());
                    resultMap.putString("message", result.getMessage());
                    initializeProjectResult.putMap(interceptId, resultMap);
                }

                reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit(INITIALIZE_PROJECT_EVENT, initializeProjectResult);
            }
        });
    }

    @ReactMethod
    public void evaluateProject() {
        final WritableMap evaluateProjectResult = Arguments.createMap();

        Qualtrics.instance().evaluateProject(new IQualtricsProjectEvaluationCallback() {
            @Override
            public void run(Map<String, TargetingResult> targetingResults) {
                for (String interceptId: targetingResults.keySet()) {
                    final WritableMap resultMap = Arguments.createMap();
                    final TargetingResult targetingResult = targetingResults.get(interceptId);
                    resultMap.putBoolean("passed", targetingResult.passed());
                    resultMap.putString("surveyUrl", targetingResult.getSurveyUrl());
                    resultMap.putString("creativeType", targetingResult.getCreativeType().name());
                    evaluateProjectResult.putMap(interceptId, resultMap);
                }

                reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit(EVALUATE_PROJECT_EVENT, evaluateProjectResult);
            }
        });
    }

    @ReactMethod
    public void evaluateIntercept(String interceptId) {
        final WritableMap evaluateInterceptResult = Arguments.createMap();

        Qualtrics.instance().evaluateIntercept(interceptId, new IQualtricsCallback() {
            @Override
            public void run(TargetingResult targetingResult) {
                evaluateInterceptResult.putBoolean("passed", targetingResult.passed());
                evaluateInterceptResult.putString("surveyUrl", targetingResult.getSurveyUrl());
                evaluateInterceptResult.putString("creativeType", targetingResult.getCreativeType().name());

                reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit(EVALUATE_INTERCEPT_EVENT, evaluateInterceptResult);
            }
        });
    }

    @ReactMethod
    public void displayIntercept(final String interceptId, final Callback callback) {
        UiThreadUtil.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (getCurrentActivity() != null) {
                    boolean displayResult = Qualtrics.instance().displayIntercept(getCurrentActivity(), interceptId);
                    callback.invoke(displayResult);
                } else {
                    Log.w(TAG, "Display requires active activity");
                    callback.invoke(false);
                }
            }
        });

    }

    @ReactMethod
    public void getInitializedIntercepts(final Callback callback) {
        WritableArray writableArray=Arguments.createArray();

        List<String> intercepts = Qualtrics.instance().getInitializedIntercepts();
        for (String intercept: intercepts) {
            writableArray.pushString(intercept);
        }

        callback.invoke(writableArray);
    }

    @ReactMethod
    public void getPassingIntercepts(final Callback callback) {
        WritableArray writableArray=Arguments.createArray();

        List<String> intercepts = Qualtrics.instance().getPassingIntercepts();
        for (String intercept: intercepts) {
            writableArray.pushString(intercept);
        }

        callback.invoke(writableArray);
    }
}
