/**
 * react-native-qualtrics // npm module
 * unit tests for:
 * class InitializationResult
 * class TargetingResult
 */

import Qualtrics, {
    RNQualtricsDigital,
    InitializationResult,
    TargetingResult,
} from '../../index.js';

import { NativeModules, NativeEventEmitter } from 'react-native';

var mockInitializationResult = null;
var mockTargetingResult = null;
var message = 'message';
var surveyUrl = 'surveyUrl';
var exceptionMessage = 'Exception Error';

const spyConsoleLog = jest.spyOn(global.console, 'log');

jest.mock('react-native/Libraries/EventEmitter/NativeEventEmitter');
const nativeEventEmitter = new NativeEventEmitter();

jest.mock('react-native/Libraries/BatchedBridge/NativeModules', () => {
    return {
        RNQualtricsDigital: {
            recordClick: jest.fn(),
            recordImpression: jest.fn(),
        },
    };
});

describe('InitializationResult constructor', function () {
    it('should instantiate InitializationResult given valid passed and message fields', function () {
        mockInitializationResult = new InitializationResult(true, message);
        expect(mockInitializationResult.passed).toBe(true);
        expect(mockInitializationResult.message).toBe(message);

        mockInitializationResult = new InitializationResult(false, message + '2');
        expect(mockInitializationResult.passed).toBe(false);
        expect(mockInitializationResult.message).toBe(message + '2');
    });

    it('should instantiate InitializationResult given one parameter', function () {
        mockInitializationResult = new InitializationResult(true);
        expect(mockInitializationResult.passed).toBe(true);
        expect(mockInitializationResult.message).toBe(undefined);

        mockInitializationResult = new InitializationResult(false);
        expect(mockInitializationResult.passed).toBe(false);
        expect(mockInitializationResult.message).toBe(undefined);
    });

    it('should instantiate InitializationResult given null parameters', function () {
        mockInitializationResult = new InitializationResult(null, null);
        expect(mockInitializationResult.passed).toBe(null);
        expect(mockInitializationResult.message).toBe(null);
    });

    it('should instantiate InitializationResult given no parameters', function () {
        mockInitializationResult = new InitializationResult();
        expect(mockInitializationResult.passed).toBe(undefined);
        expect(mockInitializationResult.message).toBe(undefined);
    });
});

describe('TargetingResult constructor', function () {
    it('should instantiate TargetingResult given valid passed and surveyUrl fields', function () {
        mockTargetingResult = new TargetingResult(true, surveyUrl);
        expect(mockTargetingResult.passed).toBe(true);
        expect(mockTargetingResult.surveyUrl).toBe(surveyUrl);

        mockTargetingResult = new TargetingResult(false, surveyUrl + '2');
        expect(mockTargetingResult.passed).toBe(false);
        expect(mockTargetingResult.surveyUrl).toBe(surveyUrl + '2');
    });

    it('should instantiate TargetingResult given valid passed and surveyUrl fields', function () {
        mockTargetingResult = new TargetingResult(true);
        expect(mockTargetingResult.passed).toBe(true);
        expect(mockTargetingResult.surveyUrl).toBe(undefined);

        mockTargetingResult = new TargetingResult(false);
        expect(mockTargetingResult.passed).toBe(false);
        expect(mockTargetingResult.surveyUrl).toBe(undefined);
    });

    it('should instantiate TargetingResult given null parameters', function () {
        mockTargetingResult = new TargetingResult(null, null);
        expect(mockTargetingResult.passed).toBe(null);
        expect(mockTargetingResult.surveyUrl).toBe(null);
    });

    it('should instantiate TargetingResult given no parameters', function () {
        mockTargetingResult = new TargetingResult();
        expect(mockTargetingResult.passed).toBe(undefined);
        expect(mockTargetingResult.surveyUrl).toBe(undefined);
    });
});

describe('TargetingResult recordClick method', function () {
    beforeEach(() => {
        RNQualtricsDigital.recordClick.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should call recordClick given passed TargetingResult', function () {
        mockTargetingResult = new TargetingResult(true, surveyUrl);
        mockTargetingResult.recordClick();
        expect(RNQualtricsDigital.recordClick).toHaveBeenCalled();
        expect(RNQualtricsDigital.recordClick.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });

    it('should call recordClick given not passed TargetingResult', function () {
        mockTargetingResult = new TargetingResult(false, surveyUrl);
        mockTargetingResult.recordClick();
        expect(RNQualtricsDigital.recordClick).toHaveBeenCalled();
        expect(RNQualtricsDigital.recordClick.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });
});

describe('TargetingResult recordClick method with exception', function () {
    beforeAll(() => {
        RNQualtricsDigital.recordClick.mockImplementation(() => {
            throw exceptionMessage;
        });
    });

    beforeEach(() => {
        RNQualtricsDigital.recordClick.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should call recordClick and log error when exception is thrown given passed TargetingResult', function () {
        mockTargetingResult = new TargetingResult(true, surveyUrl);
        mockTargetingResult.recordClick();
        expect(RNQualtricsDigital.recordClick).toHaveBeenCalled();
        expect(RNQualtricsDigital.recordClick.mock.calls.length).toBe(1);
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(exceptionMessage));
    });

    it('should call recordClick and log error when exception is thrown given not passed TargetingResult', function () {
        mockTargetingResult = new TargetingResult(false, surveyUrl);
        mockTargetingResult.recordClick();
        expect(RNQualtricsDigital.recordClick).toHaveBeenCalled();
        expect(RNQualtricsDigital.recordClick.mock.calls.length).toBe(1);
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(exceptionMessage));
    });
});

describe('TargetingResult recordImpression method', function () {
    beforeEach(() => {
        RNQualtricsDigital.recordImpression.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should call recordImpression given passed TargetingResult', function () {
        mockTargetingResult = new TargetingResult(true, message);
        mockTargetingResult.recordImpression();
        expect(RNQualtricsDigital.recordImpression).toHaveBeenCalled();
        expect(RNQualtricsDigital.recordImpression.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });

    it('should call recordImpression given passed TargetingResult', function () {
        mockTargetingResult = new TargetingResult(false, message);
        mockTargetingResult.recordImpression();
        expect(RNQualtricsDigital.recordImpression).toHaveBeenCalled();
        expect(RNQualtricsDigital.recordImpression.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });
});

describe('TargetingResult recordImpression method with exception', function () {
    beforeAll(() => {
        RNQualtricsDigital.recordImpression.mockImplementation(() => {
            throw exceptionMessage;
        });
    });

    beforeEach(() => {
        RNQualtricsDigital.recordImpression.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should call recordImpression and log error when exception is thrown given passed TargetingResult', function () {
        mockTargetingResult = new TargetingResult(true, surveyUrl);
        mockTargetingResult.recordImpression();
        expect(RNQualtricsDigital.recordImpression).toHaveBeenCalled();
        expect(RNQualtricsDigital.recordImpression.mock.calls.length).toBe(1);
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(exceptionMessage));
    });

    it('should call recordImpression and log error when exception is thrown given not passed TargetingResult', function () {
        mockTargetingResult = new TargetingResult(false, surveyUrl);
        mockTargetingResult.recordImpression();
        expect(RNQualtricsDigital.recordImpression).toHaveBeenCalled();
        expect(RNQualtricsDigital.recordImpression.mock.calls.length).toBe(1);
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(exceptionMessage));
    });
});
