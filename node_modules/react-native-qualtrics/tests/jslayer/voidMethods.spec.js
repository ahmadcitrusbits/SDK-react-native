/**
 * react-native-qualtrics // npm module
 * unit tests for:
 * registerViewVisit()
 * resetTimer()
 * resetViewCounter()
 * setString()
 * setNumber();
 */

import Qualtrics, {
    RNQualtricsDigital,
	registerViewVisit,
    resetTimer,
    resetViewCounter,
    setString,
    setNumber,
} from '../../index.js';

import { NativeModules, NativeEventEmitter } from 'react-native';

var viewName = 'viewName';
var mockKey = 'mockKey';
var mockNumber = 13;
var mockString = 'mockvalue';
var mockAsset = 'my_notification_icon';
var typeError = 'TypeError';
var exceptionMessage = 'Exception Error';
var mockDisplayTargetResult = null;

const spyConsoleLog = jest.spyOn(global.console, 'log');

jest.mock('react-native/Libraries/EventEmitter/NativeEventEmitter');
const nativeEventEmitter = new NativeEventEmitter();

jest.mock('react-native/Libraries/BatchedBridge/NativeModules', () => {
    return {
        RNQualtricsDigital: {
            registerViewVisit: jest.fn(),
            resetTimer: jest.fn(),
            resetViewCounter: jest.fn(),
            setString: jest.fn(),
            setNumber: jest.fn(),
            setDateTime: jest.fn(),
            setNotificationIconAsset: jest.fn(),
            displayTarget: jest.fn((callback) => {
                callback(mockDisplayTargetResult);
            }),
        },
    };
});

describe('registerViewVisit', function () {
	beforeEach(() => {
		RNQualtricsDigital.registerViewVisit.mockClear();
        spyConsoleLog.mockReset();
	});

    it('should not call registerViewVisit and log error given invalid viewName parameter type', function () {
        Qualtrics.registerViewVisit(null);
        expect(RNQualtricsDigital.registerViewVisit).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));

        Qualtrics.registerViewVisit(123);
        expect(RNQualtricsDigital.registerViewVisit).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));

        Qualtrics.registerViewVisit(undefined);
        expect(RNQualtricsDigital.registerViewVisit).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));
    });

	it('should call registerViewVisit given valid viewName parameter type', function () {
        Qualtrics.registerViewVisit(viewName);
        expect(RNQualtricsDigital.registerViewVisit).toHaveBeenCalledWith(viewName);
        expect(RNQualtricsDigital.registerViewVisit.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });
});

describe('resetTimer', function () {
    beforeEach(() => {
        RNQualtricsDigital.resetTimer.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should call resetTimer and log error after exception is thrown', function () {
        RNQualtricsDigital.resetTimer.mockImplementation(() => {
            throw exceptionMessage;
        });

        Qualtrics.resetTimer();
        expect(RNQualtricsDigital.resetTimer.mock.calls.length).toBe(1);
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(exceptionMessage));
    });

    it('should call resetTimer and not log error with no exception', function () {
        RNQualtricsDigital.resetTimer.mockImplementation(() => {
            jest.fn();
        });

        Qualtrics.resetTimer();
        expect(RNQualtricsDigital.resetTimer).toHaveBeenCalled();
        expect(RNQualtricsDigital.resetTimer.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });
});

describe('resetViewCounter', function () {
    beforeEach(() => {
        RNQualtricsDigital.resetViewCounter.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should call resetViewCounter and log error after exception is thrown', function () {
        RNQualtricsDigital.resetViewCounter.mockImplementation(() => {
            throw exceptionMessage;
        });

        Qualtrics.resetViewCounter();
        expect(RNQualtricsDigital.resetViewCounter).toHaveBeenCalled();
        expect(RNQualtricsDigital.resetViewCounter.mock.calls.length).toBe(1);
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(exceptionMessage));
    });

    it('should call resetViewCounter and not log error with no exception', function () {
        RNQualtricsDigital.resetViewCounter.mockImplementation(() => {
            jest.fn();
        });

        Qualtrics.resetViewCounter();
        expect(RNQualtricsDigital.resetViewCounter).toHaveBeenCalled();
        expect(RNQualtricsDigital.resetViewCounter.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });
});

describe('setString', function () {
    beforeEach(() => {
        RNQualtricsDigital.setString.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should not call setString and log error given no parameters', function () {
        Qualtrics.setString();
        expect(RNQualtricsDigital.setString).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));
    });

    it('should not call setString and log error given one parameter', function () {
        Qualtrics.setString(mockKey);
        expect(RNQualtricsDigital.setString).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));
    });

    it('should not call setString and log error given invalid key and invalid value', function () {
        Qualtrics.setString(null, null);
        expect(RNQualtricsDigital.setString).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));
    });

    it('should call setString given valid key and value', function () {
        Qualtrics.setString(mockKey, mockString);
        expect(RNQualtricsDigital.setString).toBeCalledWith(mockKey, mockString);
        expect(RNQualtricsDigital.setString.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });
});

describe('setNumber', function () {
    beforeEach(() => {
        RNQualtricsDigital.setNumber.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should not call setNumber and log error given no parameters', function () {
        Qualtrics.setNumber();
        expect(RNQualtricsDigital.setNumber).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));
    });

    it('should not call setNumber and log error given one parameter', function () {
        Qualtrics.setNumber(mockKey);
        expect(RNQualtricsDigital.setNumber).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));
    });

    it('should not call setNumber and log error given invalid key and invalid value', function () {
        Qualtrics.setNumber(null, null);
        expect(RNQualtricsDigital.setNumber).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));
    });

    it('should call setNumber given valid key and value', function () {
        Qualtrics.setNumber(mockKey, mockNumber);
        expect(RNQualtricsDigital.setNumber).toBeCalledWith(mockKey, mockNumber);
        expect(RNQualtricsDigital.setNumber.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });
});

describe('setDateTime', function () {
    beforeEach(() => {
        RNQualtricsDigital.setDateTime.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should not call setDateTime and log error given no parameters', function () {
        Qualtrics.setDateTime();
        expect(RNQualtricsDigital.setDateTime).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));
    });

    it('should not call setDateTime and log error given invalid key', function () {
        Qualtrics.setDateTime(null);
        expect(RNQualtricsDigital.setDateTime).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));
    });

    it('should call setDateTime given valid key', function () {
        Qualtrics.setDateTime(mockKey);
        expect(RNQualtricsDigital.setDateTime).toBeCalledWith(mockKey);
        expect(RNQualtricsDigital.setDateTime.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });
});

describe('setNotificationIconAsset', function () {
    beforeEach(() => {
        RNQualtricsDigital.setNotificationIconAsset.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should not call setNotificationIconAsset and log error given no parameters', function () {
        Qualtrics.setNotificationIconAsset();
        expect(RNQualtricsDigital.setNotificationIconAsset).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));
    });

    it('should not call setNotificationIconAsset and log error given invalid asset', function () {
        Qualtrics.setNotificationIconAsset(5);
        expect(RNQualtricsDigital.setNotificationIconAsset).not.toHaveBeenCalled();
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(typeError));
    });

    it('should call setNotificationIconAsset given valid asset', function () {
        Qualtrics.setNotificationIconAsset(mockAsset);
        expect(RNQualtricsDigital.setNotificationIconAsset).toBeCalledWith(mockAsset);
        expect(RNQualtricsDigital.setNotificationIconAsset.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });
});

describe('displayTarget', function() {
    beforeEach(() => {
        RNQualtricsDigital.displayTarget.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should call displayTarget and not log error given true displayTargetResult', function () {
        mockDisplayTargetResult = true;

        Qualtrics.displayTarget();
        expect(RNQualtricsDigital.displayTarget).toHaveBeenCalled();
        expect(RNQualtricsDigital.displayTarget.mock.calls.length).toBe(1);
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });

    it('should call displayTarget and log error given false displayTargetResult', function () {
        mockDisplayTargetResult = false;

        Qualtrics.displayTarget();
        expect(RNQualtricsDigital.displayTarget).toHaveBeenCalled();
        expect(RNQualtricsDigital.displayTarget.mock.calls.length).toBe(1);
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining('displayTarget() failed'));
    });

    it('should call resetViewCounter and log error after exception is thrown', function () {
        RNQualtricsDigital.displayTarget.mockImplementation(() => {
            throw exceptionMessage;
        });

        Qualtrics.displayTarget();
        expect(RNQualtricsDigital.displayTarget).toHaveBeenCalled();
        expect(RNQualtricsDigital.displayTarget.mock.calls.length).toBe(1);
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(exceptionMessage));
    });
});
