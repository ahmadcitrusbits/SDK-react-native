/**
 * react-native-qualtrics // npm module
 * unit tests for display()
 */

import Qualtrics, {
    RNQualtricsDigital,
    display
} from '../../index.js';

import * as ReactNative from "react-native";
import { NativeModules, NativeEventEmitter } from 'react-native';

var mockReturnBoolean = null;
var exceptionMessage = 'Exception Error';

const spyConsoleLog = jest.spyOn(global.console, 'log');

jest.mock('react-native/Libraries/EventEmitter/NativeEventEmitter');
const nativeEventEmitter = new NativeEventEmitter();

jest.mock('react-native/Libraries/BatchedBridge/NativeModules', () => {
    return {
        RNQualtricsDigital: {
            display: jest.fn(),
            displayIntercept: jest.fn()
        },
    };
});

describe('display with promise', function () {
    beforeAll(() => {
        RNQualtricsDigital.display.mockImplementation((callback) => {
            callback(mockReturnBoolean);
        });
    });

    beforeEach(() => {
        RNQualtricsDigital.display.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should call display and resolve promise with true given true return value', function () {
        mockReturnBoolean = true;

        expect(Qualtrics.display()).resolves.toEqual(true)
        expect(RNQualtricsDigital.display.mock.calls.length).toBe(1)
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });

    it('should call display and reject promise with false given false return value', function () {
        mockReturnBoolean = false;

        expect(Qualtrics.display()).rejects.toEqual(false)
        expect(RNQualtricsDigital.display.mock.calls.length).toBe(1)
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });

    it('should call display and reject promise with false given null return value', function () {
        mockReturnBoolean = null;

        expect(Qualtrics.display()).rejects.toEqual(false)
        expect(RNQualtricsDigital.display.mock.calls.length).toBe(1)
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });
});

describe('display error', function () {
    beforeAll(() => {
        RNQualtricsDigital.display.mockImplementation(() => {
            throw exceptionMessage;
        });
    });

    beforeEach(() => {
        RNQualtricsDigital.display.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should log error and reject promise when exception is thrown', function () {
        expect(Qualtrics.display()).rejects.toEqual(false)
        expect(RNQualtricsDigital.display.mock.calls.length).toBe(1)
        expect(spyConsoleLog).toHaveBeenCalledWith(expect.stringContaining(exceptionMessage));
    });
});

describe('display intercept', function() {
    beforeAll(() => {
        RNQualtricsDigital.displayIntercept.mockImplementation((interceptId, callback) => {
            callback(mockReturnBoolean);
        });
    });

    beforeEach(() => {
        RNQualtricsDigital.displayIntercept.mockClear();
        spyConsoleLog.mockReset();
    });

    it('should call displayIntercept and resolve promise with true given true return value', function () {
        mockReturnBoolean = true;

        expect(Qualtrics.displayIntercept("MOCK_INTERCEPT_ID")).resolves.toEqual(true)
        expect(RNQualtricsDigital.displayIntercept.mock.calls.length).toBe(1)
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });

    it('should call display and reject promise with false given false return value', function () {
        mockReturnBoolean = false;

        expect(Qualtrics.displayIntercept("MOCK_INTERCEPT")).rejects.toEqual(false)
        expect(RNQualtricsDigital.displayIntercept.mock.calls.length).toBe(1)
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });

    it('should call display and reject promise with false given null return value', function () {
        mockReturnBoolean = null;

        expect(Qualtrics.displayIntercept("MOCK_INTERCEPT")).rejects.toEqual(false)
        expect(RNQualtricsDigital.displayIntercept.mock.calls.length).toBe(1)
        expect(spyConsoleLog).not.toHaveBeenCalled();
    });
})
